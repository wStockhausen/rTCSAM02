% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/runTCSAM02.R
\name{runTCSAM02}
\alias{runTCSAM02}
\title{Function to run TCSAM02.}
\usage{
runTCSAM02(
  os = "osx",
  path = ".",
  model = "tcsam02",
  path2model = "",
  configFile = "",
  pin = FALSE,
  pinFile = NULL,
  mseMode = NULL,
  minPhase = 1,
  maxPhase = NULL,
  calcOFL = FALSE,
  calcTAC = FALSE,
  HCR = 1,
  calcDynB0 = FALSE,
  hess = FALSE,
  mcmc = FALSE,
  mc.N = 1e+06,
  mc.save = 1000,
  mc.scale = 1000,
  jitter = FALSE,
  iSeed = NULL,
  saveResults = hess,
  test = FALSE,
  cleanup = TRUE,
  verbose = FALSE
)
}
\arguments{
\item{os}{\itemize{
\item 'win', 'mac', 'osx', or 'linux'
}}

\item{path}{\itemize{
\item path for model output
}}

\item{model}{\itemize{
\item TCSAM02 model executable name
}}

\item{path2model}{\itemize{
\item path to model executable
}}

\item{configFile}{\itemize{
\item filename (including path) to model configuration file
}}

\item{pin}{\itemize{
\item T/F to use a pin file
}}

\item{pinFile}{\itemize{
\item name of pin file to use (if pin=TRUE)
}}

\item{mseMode}{\itemize{
\item flag to run model in MSE mode (see \code{getRunComands})
}}

\item{minPhase}{\itemize{
\item phase to start minimization (or NULL)
}}

\item{maxPhase}{\itemize{
\item final minimization phase (or NULL)
}}

\item{calcOFL}{\itemize{
\item flag (T/F) to perform OFL calculations
}}

\item{calcTAC}{\itemize{
\item flag (T/F) to calculate the TAC for the next fishing year
}}

\item{HCR}{\itemize{
\item integer indicating the Harvest Control Rule used to calculate the TAC
}}

\item{calcDynB0}{\itemize{
\item flag to calculate dynamic B0
}}

\item{hess}{\itemize{
\item T/F to compute hessian (and .std file)
}}

\item{mcmc}{\itemize{
\item T/F to run mcmc
}}

\item{mc.N}{\itemize{
\item number of mcmc iterations to do
}}

\item{mc.save}{\itemize{
\item number of iterations to skip when saving mcmc calculations
}}

\item{mc.scale}{\itemize{
\item number of iterations to adjust scale for mcmc calculations
}}

\item{jitter}{\itemize{
\item T/F to jitter parameters
}}

\item{iSeed}{\itemize{
\item seed for random number generator (or NULL)
}}

\item{saveResults}{\itemize{
\item T/F to save results to ModelResults.RData as a tcsam02.resLst object using \code{getResLst(...)}
}}

\item{test}{\itemize{
\item flag (T/F) to run function in "test" mode
}}

\item{cleanup}{\itemize{
\item flag (T/F) to clean up some output files
}}

\item{verbose}{\itemize{
\item flag to print debugging info
}}
}
\value{
\itemize{
\item dataframe of class 'tcam02.par', with 2 columns (name, value) with jitter iSeed (if jittered)
and par file info, or NULL if par file does not exist.
}
}
\description{
This function runs a TCSAM02 model once.
}
\details{
This function creates a shell script ('./tmp.sh') in the
working directory and uses it to run a version of the TCSAM02 model.\cr
Initial model parameters can be jittered based on the system clock time or using iSeed
to set the random number generator. The iSeed and final objective function value are
saved for each model run in a csv file (the value of out.csv).

If the path associated with \code{configFile} is a relative one, it should
be relative to the \code{path} variable. If saveResults=TRUE, getResLSt() is used to read in
the report file, prs file, and std files are read in and the resulting tcsam02.resLst object is
saved to 'ModelResults.RData'. If jitter=TRUE, hess=FALSE, and cleanup=TRUE, then most output files
(including the .rep files) are deleted after the model run to save disk space.
}
